/*!
\page configuration Configuration
<div class="has-toc"></div>

# Configuration # {#conf_main}

Application configuration is handled by implementations of
\link wcmf::lib::config::Configuration `Configuration`\endlink. To use the configuration
throughout the application, an instance of the appropriate implementation is
passed to \link wcmf::lib::core::ObjectFactory `ObjectFactory`\endlink. This class
provides \ref conf_di and access to the configuration.

The following code demonstrates how to set up and use the configuration in code:

~~~~~~~~~~~~~{.php}
$configPath = '../config/';
$configFile = 'config.ini';

// configure ObjectFactory
$config = new InifileConfiguration($configPath);
$config->addConfiguration($configFile);
ObjectFactory::configure($config);

// get a pre-configured instance
$session = ObjectFactory::getInstance('session');

// get a configuration value
$config = ObjectFactory::getConfigurationInstance();
$tz = $config->getValue('timezone', 'application');
~~~~~~~~~~~~~

If you are using the \link wcmf::lib::presentation::Application `Application`\endlink
class to bootstrap the application, the configuration setup is done automatically.

## Configuration Format ## {#conf_format}

Currently wCMF provides an implementation for using the
[INI file](http://en.wikipedia.org/wiki/INI_file) format.
\link wcmf::lib::config::impl::InifileConfiguration `InifileConfiguration`\endlink
handles ini files that consist of **key-value pairs** that are grouped in **sections**:

~~~~~~~~~~~~~{.ini}
[SectionA]
key1 = value1
key2 = value2

[SectionB]
key3 = value3
~~~~~~~~~~~~~

Additionally it defines **array values** (enclosed in curly braces) and **inclusion**
of additional files. Included files are defined in the `include` key of the `Config`
section. Keys in the current file override keys from included files.

The following example shows how to include an array of additional configuration
files to separate concerns:

~~~~~~~~~~~~~{.ini}
[Config]
include = {server.ini, persistence.ini, presentation.ini, security.ini}
~~~~~~~~~~~~~

@note While path values in the configuration are normally resolved relative to the
value of the `WCMF_BASE` constant, the included files are expected to be located
in the directory that is passed to the constructor of
\link wcmf::lib::config::impl::InifileConfiguration `InifileConfiguration`\endlink.

## Dependency injection ## {#conf_di}

wCMF supports [Dependency injection](http://en.wikipedia.org/wiki/Dependency_injection)
through the \link wcmf::lib::core::ObjectFactory `ObjectFactory`\endlink class.
This class implements _setter injection_, which means that dependencies are either
set through a _setter method_ of the client class or a _public member variable_.

Assembly details for client instances are defined in the application configuration
in special sections containing a  `__class` key. The value of the key denotes the
class to be used to create the client instance. All other keys are mapped to
setters/members of that class. Complex dependencies of an instance may be set by
using the `$` notation, which refers to another configuration section. If a section
does not contain a `__class` key it is instantiated as an associative array.

The following example demonstrates the pattern by means of the
\link wcmf::lib::persistence::PersistenceFacade `PersistenceFacade`\endlink instance:

~~~~~~~~~~~~~{.ini}
[PersistenceFacade]
__class = wcmf\lib\persistence\impl\DefaultPersistenceFacade
mappers = $typeMapping
logging = false
logStrategy = $auditingLogStragegy

[AuditingLogStragegy]
__class = wcmf\lib\persistence\output\impl\AuditingOutputStrategy

[TypeMapping]
app.src.model.wcmf.DBSequence = $app_src_model_wcmf_DBSequenceRDBMapper
app.src.model.wcmf.Lock = $app_src_model_wcmf_LockRDBMapper

[app_src_model_wcmf_DBSequenceRDBMapper]
__class = app\src\model\wcmf\DBSequenceRDBMapper
connectionParams = $database

[app_src_model_wcmf_LockRDBMapper]
__class = app\src\model\wcmf\LockRDBMapper
connectionParams = $database

[Database]
dbType = sqlite
dbHostName = 127.0.0.1
dbName = app/test-db.sq3
dbUserName =
dbPassword =
dbCharSet = utf8
~~~~~~~~~~~~~

The first section defines that the instance named _PersistenceFacade_ is an object of
the class \link wcmf::lib::persistence::impl::DefaultPersistenceFacade `DefaultPersistenceFacade`\endlink.
The _logging_ property is set to _false_, the _logStrategy_ property is set to an
instance of \link wcmf::lib::persistence::output::impl::AuditingOutputStrategy `AuditingOutputStrategy`\endlink.
The _TypeMapping_ section does not contain a `__class` key, which means that the
_mappers_ property of _PersistenceFacade_ will be an associative array. In our
case it maps class names (e.g. _app.src.model.wcmf.DBSequence_) to mapper instances
(e.g. `DBSequenceRDBMapper`). Further sections show that the _connectionParams_
property of the `DBSequenceRDBMapper` instance is set to an associative array
describing the database connection (section _Database_).

@note Configuration section and key names are treated case-insensitive.

The \link wcmf::lib::persistence::PersistenceFacade `PersistenceFacade`\endlink
instance may be retrieved later by using the following code:

~~~~~~~~~~~~~{.php}
$persistenceFacade = ObjectFactory::getInstance('persistenceFacade');
~~~~~~~~~~~~~

### Shared and Non-Shared instances ### {#conf_shareddi}

By default all instances created by \link wcmf::lib::core::ObjectFactory `ObjectFactory`\endlink
are _shared_ instances, which means, that they will be created on the first call
and only returned by succeeding calls. If you want to create a _non-shared_ instance,
you must use the `__shared` key in configuration and set it to _false_.

The following example shows the configuration of a non-shared
\link wcmf::lib::presentation::view::View `View`\endlink instance:

~~~~~~~~~~~~~{.ini}
[View]
__class = wcmf\lib\presentation\view\impl\SmartyView
__shared = false
compileCheck = true
caching = false
cacheLifetime = 3600
cacheDir = app/cache/smarty/
~~~~~~~~~~~~~

## Configuration for individual users ## {#conf_peruser}

wCMF's user base class \link wcmf::lib::security::principal::impl::AbstractUser `AbstractUser`\endlink
has a persistent property `config` which may be used to set a individual configuration
for a user. This will be loaded after the standard configuration and extends its settings.
If two keys have the same name the one from the user configuration overwrites the standard one.
Using the _RoleConfig_ configuration section, you can easily assign configuration files
to groups:

~~~~~~~~~~~~~{.ini}
[RoleConfig]
administrators = admin.ini
~~~~~~~~~~~~~

If a user is added to a listed role, the given configuration file will be automatically
assigned to it, if no individual configuration is set yet.

## Logging configuration ## {#conf_logging}

wCMF uses [log4php](http://logging.apache.org/log4php/) for logging. The logging
configuration is expected to be stored in a file called _log4php.php_, located in
the same directory as the other configuration files (see \ref conf_format).

The configuration is applied as follows:

~~~~~~~~~~~~~{.php}
$configPath = '../config/';
Log::configure($configPath.'log4php.php');
~~~~~~~~~~~~~

If you are using the \link wcmf::lib::presentation::Application `Application`\endlink
class to bootstrap the application, the logging setup is done automatically.

wCMF uses log4php's
[PHP configuration format](https://logging.apache.org/log4php/docs/configuration.html#PHP).
By default the log level is set to `ERROR` and a daily log file is created in the
directory _app/log/_.

Since in wCMF each class uses it's own logger named after the class, it's easy
to set the log level for individual classes.

The following configuration sets the log level of the
\link wcmf::lib::presentation::Controller `Controller`\endlink class to `DEBUG`:

~~~~~~~~~~~~~{.php}
return array(
  'rootLogger' => array(
    'level' => 'ERROR',
    'appenders' => array('dailyFile', 'echo'),
  ),

  'loggers' => array(
    'wcmf\lib\presentation\Controller' => array('level' => 'DEBUG', 'appenders' => array('dailyFile')),
  ),

  ...
);
~~~~~~~~~~~~~
*/
