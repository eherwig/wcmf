/*!
\page presentation Presentation
<div class="has-toc"></div>

# Presentation # {#pres_main}

Presentation refers to the part of the application that is visible to the user -
the _user interface_ - and the handling of user interaction.

## Application ## {#pres_application}

Web applications typically implement a _request-response pattern_, where a
client sends a
([HTTP](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)-)request to the
application, which returns a response after processing it. wCMF encapsulates the
described procedure inside the
\link wcmf::lib::presentation::Application `Application`\endlink class. The
following code demonstrates the usage of this class in the main entry script of
wCMF's default application.

~~~~~~~~~~~~~{.php}
$application = new Application();
try {
  // initialize the application
  $request = $application->initialize(WCMF_BASE.'app/config/', 'config.ini', '', '', 'cms');

  // run the application
  $response = $application->run($request);
}
catch (Exception $ex) {
  try {
    $application->handleException($ex, isset($request) ? $request : null);
  }
  catch (Exception $unhandledEx) {
    echo("An unhandled exception occured. Please see log file for details.");
  }
}
~~~~~~~~~~~~~

The example shows the three important public methods of the
\link wcmf::lib::presentation::Application `Application`\endlink class:

- The \link wcmf::lib::presentation::Application::initialize `initialize`\endlink
  method is used to __setup__ the
  \link wcmf::lib::presentation::Application `Application`\endlink. It returns a
  \link wcmf::lib::presentation::Request `Request`\endlink instance, that may be
  modified before execution.
- The \link wcmf::lib::presentation::Application::run `run`\endlink method is
  called to __execute__ the given request. The method returns a
  \link wcmf::lib::presentation::Response `Response`\endlink instance, that is not
  used in this example.
- The \link wcmf::lib::presentation::Application::handleException `handleException`\endlink
  method is called, if an __exception__ occurs. The method rolls back the database
  transaction and calls the `failure` action.

The details of request execution are the topic of the next section.

## Request processing ## {#pres_request}

The \link wcmf::lib::presentation::Request `Request`\endlink instance created
on initialization of the application provides all information about the incoming
HTTP request, that is necessary for execution. Upon execution, the following
actions are performed:

1. The \link wcmf::lib::presentation::Request `Request`\endlink instance is passed
   to \link wcmf::lib::presentation::ActionMapper `ActionMapper`\endlink for further
   processing.
2. The \ref arch_actionkey is determined from the request parameters.
3. \link wcmf::lib::security::PermissionManager `PermissionManager`\endlink is
   asked to authorize the action key for the current user (see \ref perm_check).
4. If authorization is successful, the request data is transformed into the internal
   application format (see \ref pres_format).
5. The \link wcmf::lib::presentation::Controller `Controller`\endlink instance
   matching the request is determined (see \ref pres_routing) and executed.
6. The \link wcmf::lib::presentation::Response `Response`\endlink instance is
   obtained after execution.
7. The response data is transformed into the requested response format (see
   \ref pres_format).
8. Execution returns to step 3, if a valid action key is contained in the response
   data and terminates, if not.

### Formats ### {#pres_format}

wCMF is designed to be able to consume various request formats and produce
several response formats. While some clients communicate using
[JSON](http://en.wikipedia.org/wiki/JSON) format, others might prefer to encode
data in [XML](http://en.wikipedia.org/wiki/XML).
The \link wcmf::lib::presentation::format::Formatter `Formatter`\endlink class
is used to determine the required format and delegate the actual formatting to
the correct \link wcmf::lib::presentation::format::Format `Format`\endlink
implementation. wCMF currently provides the following __implementations__:

- \link wcmf::lib::presentation::format::impl::HtmlFormat `HtmlFormat`\endlink
  expects all data to be sent as key-value-pairs. Object data are transferred in
  parameters named `value-`<em>name-oid</em> (e.g. `value-title-Book:3`).
  Responses in this format are rendered as HTML views (see \ref pres_views).
- \link wcmf::lib::presentation::format::impl::JsonFormat `JsonFormat`\endlink
  handles JSON encoded request data and encodes response data into the same format.
- \link wcmf::lib::presentation::format::impl::SoapFormat `SoapFormat`\endlink
  is used together with the [NuSOAP](http://sourceforge.net/projects/nusoap/)
  library to implement a SOAP interface.
- \link wcmf::lib::presentation::format::impl::NullFormat `NullFormat`\endlink
  is used internally, if no formatting is required, e.g. if one controller calls
  another controller.

If not explicitely set, the request and response format is automatically
determined from the __HTTP headers__ sent with the request:

- The `Content-Type` header defines the __request__ format
- The `Accept` header defines the __response__ format

Formats are defined in the `Formats` configuration section as shown in the following
example:

~~~~~~~~~~~~~{.ini}
[Formats]
html = $htmlFormat
null = $nullFormat

[HtmlFormat]
__class = wcmf\lib\presentation\format\impl\HtmlFormat

[NullFormat]
__class = wcmf\lib\presentation\format\impl\NullFormat
~~~~~~~~~~~~~

### Routing ### {#pres_routing}

Routing is the process of selecting the correct
\link wcmf::lib::presentation::Controller `Controller`\endlink for a given request.
wCMF distinguishes between _internal_ and _external_ routing.

#### Internal routing #### {#pres_routingint}

Internal routing takes place after the \link wcmf::lib::presentation::Request `Request`\endlink
instance is created and initialized. wCMF inspects the **action key** formed from
it's _sender_, _context_ and _action_ parameters (see \ref arch_actionkey) to
determine the controller to be executed next. The mapping of action keys to
controllers is defined in the `ActionMapping` configuration section.

If the executed controller together with the _context_ and _action_ parameters of
the response match another action key, the corresponding controller
will be executed afterwards. This allows to chain several actions together.

#### External routing #### {#pres_routingext}

The mapping of the current **request uri** to an action key is called external
routing. The default logic is implemented in the
\link wcmf::lib::presentation::impl::DefaultRequest::initialize `DefaultRequest::initialize`\endlink
method. The method matches the _path part_ of the request uri against the entries
of the `Routes` configuration section. Variables declared in path segments will
be automatically passed as request parameters.

The following example configuration taken from the default application illustrates
the concept:

~~~~~~~~~~~~~{.ini}
[Routes]
/ = action=cms
/rest/{language}/{className} = action=restAction&collection=1
/rest/{language}/{className}/{id|[0-9]+} = action=restAction&collection=0
~~~~~~~~~~~~~

- The first entry is matched by the root path, which is then mapped to the _cms_
action - corresponding to the action key <em>??cms</em>.
- The second entry defines the _language_ and _className_ variables (surrounded
by curly braces) and would be matched by the request uris <em>/rest/de/Author</em>
or <em>/rest/en/Book</em>. The executed action would be _restAction_.
- The _id_ variable in the third entry must be an integer because of the regular
expression constraint `[0-9]+`.

## Controllers ## {#pres_controllers}

<span class="label label-danger">TODO</span>

### Long running requests ### {#pres_longrequest}

<span class="label label-danger">TODO</span>

## Views ## {#pres_views}

<span class="label label-danger">TODO</span>

### Caching ### {#pres_caching}

<span class="label label-danger">TODO</span>

## Events ## {#pres_events}

<span class="label label-danger">TODO</span>

## Debugging/Logging ## {#pres_debug_log}

<span class="label label-danger">TODO</span>
*/
