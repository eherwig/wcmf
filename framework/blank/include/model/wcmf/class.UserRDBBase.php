<?php
/**
 * This file was generated by wCMFGenerator 3.0.0017 from newroles.uml on Wed Dec 15 04:52:38 CET 2010. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(WCMF_BASE."wcmf/lib/security/class.User.php");

/**
 * @class UserRDB
 * UserRDB description: 
 *
 * @author 
 * @version 1.0
 */
class UserRDBBase extends User
{
    function __construct($oid=null, $type=null)
    {
      if ($type == null)
        parent::__construct($oid, 'UserRDB');
      else
        parent::__construct($oid, $type);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("UserRDB");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'id') $displayName = Message::get("id");
      if ($name == 'login') $displayName = Message::get("login");
      if ($name == 'password') $displayName = Message::get("password");
      if ($name == 'name') $displayName = Message::get("name");
      if ($name == 'firstname') $displayName = Message::get("firstname");
      if ($name == 'config') $displayName = Message::get("config");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'id') $description = Message::get("");
      if ($name == 'login') $description = Message::get("");
      if ($name == 'password') $description = Message::get("");
      if ($name == 'name') $description = Message::get("");
      if ($name == 'firstname') $description = Message::get("");
      if ($name == 'config') $description = Message::get("");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return false;
    }
    /**
     * Getter/Setter for properties
     */
    function getId($unconverted=false)
    {
      if ($unconverted) {
        return $this->getUnconvertedValue('id');
      }
      else {
        return $this->getValue('id');
      }
    }
    function setId($id)
    {
      return $this->setValue('id', $id);
    }
    function getLogin($unconverted=false)
    {
      if ($unconverted) {
        return $this->getUnconvertedValue('login');
      }
      else {
        return $this->getValue('login');
      }
    }
    function setLogin($login)
    {
      return $this->setValue('login', $login);
    }
    function getPassword($unconverted=false)
    {
      if ($unconverted) {
        return $this->getUnconvertedValue('password');
      }
      else {
        return $this->getValue('password');
      }
    }
    function setPassword($password)
    {
      return $this->setValue('password', $password);
    }
    function getName($unconverted=false)
    {
      if ($unconverted) {
        return $this->getUnconvertedValue('name');
      }
      else {
        return $this->getValue('name');
      }
    }
    function setName($name)
    {
      return $this->setValue('name', $name);
    }
    function getFirstname($unconverted=false)
    {
      if ($unconverted) {
        return $this->getUnconvertedValue('firstname');
      }
      else {
        return $this->getValue('firstname');
      }
    }
    function setFirstname($firstname)
    {
      return $this->setValue('firstname', $firstname);
    }
    function getConfig($unconverted=false)
    {
      if ($unconverted) {
        return $this->getUnconvertedValue('config');
      }
      else {
        return $this->getValue('config');
      }
    }
    function setConfig($config)
    {
      return $this->setValue('config', $config);
    }
    function getSid()
    {
      return $this->getValue('sid');
    }
    /**
     * Getter/Setter for related objects
     */
    function __call($name, $arguments)
    {
      // child: Locktable
      if ($name == 'getLocktableList')
      {
        Log::warn("use of deprecated method getLocktableList. use getLocktableChildren() instead.\n".Application::getStackTrace(), __CLASS__);
        return $this->getLocktableChildren();
      }
      if ($name == 'getLocktableChildren') {
        return $this->getChildrenEx(null, 'Locktable', array('fk_user_id' => $this->getDBID()), null, false);
      }
      // child: NMUserRole
      if ($name == 'getNMUserRoleList')
      {
        Log::warn("use of deprecated method getNMUserRoleList. use getNMUserRoleChildren() instead.\n".Application::getStackTrace(), __CLASS__);
        return $this->getNMUserRoleChildren();
      }
      if ($name == 'getNMUserRoleChildren') {
        return $this->getChildrenEx(null, 'NMUserRole', array('fk_user_id' => $this->getDBID()), null, false);
      }
      if ($name == 'getRoleRDBList')
      {
        Log::warn("use of deprecated method getRoleRDBList. use getRoleRDBChildren() instead.\n".Application::getStackTrace(), __CLASS__);
        return $this->getRoleRDBChildren();
      }
      if ($name == 'getRoleRDBChildren')
      {
        // the foreign key column does not exist
        return $this->getChildrenEx(null, 'RoleRDB', null, null, false);
      }
    }
}
?>
