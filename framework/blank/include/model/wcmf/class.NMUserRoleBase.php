<?php
/**
 * This file was generated by wCMFGenerator 3.0.0017 from newroles.uml on Wed Dec 15 04:52:38 CET 2010. 
 * Manual modifications should be placed inside the protected regions.
 */
require_once(WCMF_BASE."wcmf/lib/model/class.Node.php");

/**
 * @class NMUserRole
 * NMUserRole description: 
 *
 * @author 
 * @version 1.0
 */
class NMUserRoleBase extends Node
{
    function __construct($oid=null, $type=null)
    {
      if ($type == null)
        parent::__construct('NMUserRole', $oid);
      else
        parent::__construct($type, $oid);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("NMUserRole");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'fk_user_id') $displayName = Message::get("fk_user_id");
      if ($name == 'fk_role_id') $displayName = Message::get("fk_role_id");
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'fk_user_id') $description = Message::get("");
      if ($name == 'fk_role_id') $description = Message::get("");
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
      return true;
    }
    /**
     * Getter/Setter for properties
     */
    function getFkUserId($unconverted=false)
    {
      if ($unconverted) {
        return $this->getUnconvertedValue('fk_user_id');
      }
      else {
        return $this->getValue('fk_user_id');
      }
    }
    function setFkUserId($fk_user_id)
    {
      return $this->setValue('fk_user_id', $fk_user_id);
    }
    function getFkRoleId($unconverted=false)
    {
      if ($unconverted) {
        return $this->getUnconvertedValue('fk_role_id');
      }
      else {
        return $this->getValue('fk_role_id');
      }
    }
    function setFkRoleId($fk_role_id)
    {
      return $this->setValue('fk_role_id', $fk_role_id);
    }
    /**
     * Getter/Setter for related objects
     */
    function __call($name, $arguments)
    {
      // foreign key: RoleRDB
      if ($name == 'getRoleRDBOID')
      {
        $fkValue = $this->getValue('fk_role_id');
        if ($fkValue != null) {
          return PersistenceFacade::composeOID(array('type' => 'RoleRDB', 'id' => array($fkValue)));
        }
        else {
          return null;
        }
        if ($name == 'setRoleRDB')
        {
          $node = &$arguments[0];
          if ($node != null)
          {
            if (!($node instanceof Node)) {
              call_user_func_array(array(parent, 'setRoleRDB'), $arguments);
            }
            else {
              $this->setValue('fk_role_id', $node->getDBID());
            }
          }
        }
        return;
      }
      // foreign key: UserRDB
      if ($name == 'getUserRDBOID')
      {
        $fkValue = $this->getValue('fk_user_id');
        if ($fkValue != null) {
          return PersistenceFacade::composeOID(array('type' => 'UserRDB', 'id' => array($fkValue)));
        }
        else {
          return null;
        }
        if ($name == 'setUserRDB')
        {
          $node = &$arguments[0];
          if ($node != null)
          {
            if (!($node instanceof Node)) {
              call_user_func_array(array(parent, 'setUserRDB'), $arguments);
            }
            else {
              $this->setValue('fk_user_id', $node->getDBID());
            }
          }
        }
        return;
      }
      // parent: RoleRDB
      if ($name == 'getRoleRDBParents') {
        return $this->getParentsEx(null, 'RoleRDB', null, null);
      }
      // parent: UserRDB
      if ($name == 'getUserRDBParents') {
        return $this->getParentsEx(null, 'UserRDB', null, null);
      }
    }
}
?>
