«IMPORT uml»
«IMPORT wcmf»

«EXTENSION templates::extensions::globals»
«EXTENSION templates::extensions::util»
«EXTENSION templates::extensions::naming»
«EXTENSION templates::extensions::wcmf»
«EXTENSION templates::extensions::umlutils»

«REM» template expands the node base class files -----------------«ENDREM»
«DEFINE file FOR WCMFNode»
  «FILE this.getFullPackageName().asPath()+"/"+this.name.asBaseClassFile()-»
<?php
/**
 * This file was generated by wCMFGenerator «GeneratorVersion()» from «ModelFile()» on «Date()». 
 * Manual modifications should be placed inside the protected regions.
 */
«IF this.hasSuperClass()-»
require_once(WCMF_BASE."«getSuperClass().getFullPackageName().asPath()»/«getSuperClass().name.asClassFile()»");
«ENDIF-»

/**
 * @class «this.name»
 * «this.name» description: «this.getComment("\n * ")»
 *
 * @author «this.getAuthor()»
 * @version «this.getVersion()»
 */
class «this.name»Base«IF this.hasSuperClass()» extends «this.getSuperClass().name»«ENDIF»
{
    function __construct($oid=null, $type=null)
    {
«IF this.hasSuperClass()-»
      if ($type == null)
  «IF this.getSuperClass().name == "Node"-»
        parent::__construct('«this.name»', $oid);
  «ELSE-»
        parent::__construct($oid, '«this.name»');
  «ENDIF-»
      else
  «IF this.getSuperClass().name == "Node"-»
        parent::__construct($type, $oid);
  «ELSE-»
        parent::__construct($oid, $type);
  «ENDIF-»
«ENDIF-»
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("«this.name»");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("«this.getComment(" ")»");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
  «EXPAND valueDisplayNames FOR this-»
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
  «EXPAND valueDescription FOR this-»
      return Message::get($description);
    }
    /**
     * See if the node is an association object, that implements a many to many relation
     */
    function isManyToManyObject()
    {
  «IF this.metaType.toString().contains("WCMFManyToMany")-»
      return true;
  «ELSE-»
      return false;
  «ENDIF-»
    }
    /**
     * Getter/Setter for properties
     */
  «EXPAND values FOR this-»
  «IF this.getOrderByName() == defaultOrderByName()-»
    «FOREACH this.getParentNodesRecursive() AS curParent-»
    function «this.getOrderByNameForParent(curParent).asGetter()»()
    {
      return $this->getValue('«this.getOrderByNameForParent(curParent)»');
    }
    function «this.getOrderByNameForParent(curParent).asSetter()»($sortkey)
    {
      return $this->setValue('«this.getOrderByNameForParent(curParent)»', $sortkey);
    }
    «ENDFOREACH-»
    function «this.getOrderByName().asGetter()»()
    {
      return $this->getValue('«this.getOrderByName()»');
    }
    function «this.getOrderByName().asSetter()»($sortkey)
    {
      return $this->setValue('«this.getOrderByName()»', $sortkey);
    }
  «ENDIF-»
  «EXPAND references FOR this-»
    /**
     * Getter/Setter for related objects
     */
    function __call($name, $arguments)
    {
  «IF this.getParentNodesRecursive().size > 0-»
    «EXPAND foreignKeys FOR this-»
  «ENDIF-»
  «EXPAND parents FOR this-»
  «EXPAND children FOR this-»
    }
}
?>
«ENDFILE-»
«ENDDEFINE»

«REM» values -----------------------------------------------------«ENDREM»
«DEFINE values FOR WCMFNode-»
  «FOREACH this.getWCMFValues() AS curValue-»
    function «curValue.name.asGetter()»($unconverted=false)
    {
      if ($unconverted) {
        return $this->getUnconvertedValue('«curValue.name»');
      }
      else {
        return $this->getValue('«curValue.name»');
      }
    }
    function «curValue.name.asSetter()»($«curValue.name»)
    {
      return $this->setValue('«curValue.name»', $«curValue.name»);
    }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» valueDisplayNames ------------------------------------------«ENDREM»
«DEFINE valueDisplayNames FOR WCMFNode-»
  «FOREACH this.getWCMFValuesRecursive() AS curValue-»
      if ($name == '«curValue.name»') $displayName = Message::get("«curValue.name»");
  «ENDFOREACH-»
«ENDDEFINE»

«REM» valueDescription -------------------------------------------«ENDREM»
«DEFINE valueDescription FOR WCMFNode-»
  «FOREACH this.getWCMFValuesRecursive() AS curValue-»
      if ($name == '«curValue.name»') $description = Message::get("«curValue.getComment(" ")»");
  «ENDFOREACH-»
«ENDDEFINE»

«REM» references -------------------------------------------------«ENDREM»
«DEFINE references FOR WCMFNode-»
  «FOREACH this.getWCMFValueRefs() AS curReference-»
    function «curReference.name.asGetter()»()
    {
      return $this->getValue('«curReference.name»');
    }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» foreignKeys ------------------------------------------------«ENDREM»
«DEFINE foreignKeys FOR WCMFNode-»
  «FOREACH this.getParentNodesRecursive() AS curParent-»
      // foreign key: «curParent.getRoleName()»
      if ($name == '«curParent.getRoleName().asGetter()»OID')
      {
        $fkValue = $this->getValue('«curParent.getFKName()»');
        if ($fkValue != null) {
          return PersistenceFacade::composeOID(array('type' => '«curParent.type.name»', 'id' => array($fkValue)));
        }
        else {
          return null;
        }
        if ($name == '«curParent.getRoleName().asSetter()»')
        {
          $node = &$arguments[0];
          if ($node != null)
          {
            if (!($node instanceof Node)) {
              call_user_func_array(array(parent, '«curParent.getRoleName().asSetter()»'), $arguments);
            }
            else {
    «IF this.getParentNodesRecursive().size == 1-»
              $node->addChild($this);
    «ELSE-»
              $this->setValue('«curParent.getFKName()»', $node->getDBID());
    «ENDIF-»
            }
          }
        }
        return;
      }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» parents ----------------------------------------------------«ENDREM»
«DEFINE parents FOR WCMFNode-»
  «FOREACH this.getParentNodesRecursive() AS curParent-»
      // parent: «curParent.getRoleName()»
      if ($name == '«curParent.getRoleName().asGetter()»Parents') {
        return $this->getParentsEx(null, '«curParent.type.name»', null, null);
      }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» children ---------------------------------------------------«ENDREM»
«DEFINE children FOR WCMFNode-»
  «FOREACH this.getChildNodesRecursive() AS curChild-»
      // child: «curChild.getRoleName()»
      if ($name == '«curChild.getRoleName().asGetter()»List')
      {
        Log::warn("use of deprecated method «curChild.getRoleName().asGetter()»List. use «curChild.getRoleName().asGetter()»Children() instead.\n".Application::getStackTrace(), __CLASS__);
        return $this->«curChild.getRoleName().asGetter()»Children();
      }
      if ($name == '«curChild.getRoleName().asGetter()»Children') {
        return $this->getChildrenEx(null, '«curChild.type.name»', array('«curChild.getOtherEnd().getFKName()»' => $this->getDBID()), null, false);
      }
«IF curChild.type.metaType.toString().contains("WCMFManyToMany")-»
  «FOREACH ((WCMFNode)curChild.type).getParentNodes() AS curChildParent-»
    «IF isAtOtherNmEnd(this, curChildParent.type, curChild.type)-»
      if ($name == '«curChildParent.type.name.asGetter()»List')
      {
        Log::warn("use of deprecated method «curChildParent.type.name.asGetter()»List. use «curChildParent.type.name.asGetter()»Children() instead.\n".Application::getStackTrace(), __CLASS__);
        return $this->«curChildParent.type.name.asGetter()»Children();
      }
      if ($name == '«curChildParent.type.name.asGetter()»Children')
      {
        // the foreign key column does not exist
        return $this->getChildrenEx(null, '«curChildParent.type.name»', null, null, false);
      }
    «ENDIF-»
  «ENDFOREACH-»
«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE»
