«IMPORT uml»
«IMPORT wcmf»

«EXTENSION templates::extensions::globals»
«EXTENSION templates::extensions::util»
«EXTENSION templates::extensions::naming»
«EXTENSION templates::extensions::wcmf»
«EXTENSION templates::extensions::umlutils»

«REM» template expands the node base class files -----------------«ENDREM»
«DEFINE file FOR WCMFNode»
  «FILE this.getFullPackageName().asPath()+"/"+this.name.asBaseClassFile()-»
<?php
/**
 * This file was generated by wCMFGenerator «GeneratorVersion()» from «ModelFile()» on «Date()».
 * Manual modifications should be placed inside the protected regions.
 */
«IF this.hasSuperClass()-»
require_once(WCMF_BASE."«getSuperClass().getFullPackageName().asPath()»/«getSuperClass().name.asClassFile()»");
«ENDIF-»

/**
 * @class «this.name»
 * «this.name» description: «this.getComment("\n * ")»
 *
 * @author «this.getAuthor()»
 * @version «this.getVersion()»
 */
class «this.name»Base«IF this.hasSuperClass()» extends «this.getSuperClass().name»«ENDIF»
{
    /**
     * Constructor
     * @param oid ObjectId instance (optional)
     */
    function __construct($oid=null)
    {
«IF this.hasSuperClass()-»
      if ($oid == null) {
        $oid = new ObjectId('«this.name»');
      }
      parent::__construct($oid);
«ENDIF-»
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("«this.name»");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("«this.getComment(" ")»");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
  «EXPAND valueDisplayNames FOR this-»
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
  «EXPAND valueDescription FOR this-»
      return Message::get($description);
    }
  «EXPAND values FOR this-»
  «IF this.getOrderByName() == defaultOrderByName()-»
    «FOREACH this.getParentNodesRecursive() AS curParent-»
    /**
     * Get the sortkey for the «curParent.getRoleName()» relation
     * @return Number
     */
    function «this.getOrderByNameForParent(curParent).asGetter()»()
    {
      return $this->getValue('«this.getOrderByNameForParent(curParent)»');
    }
    /**
     * Set the sortkey for the «curParent.getRoleName()» relation
     * @param sortkey The sortkey value
     */
    function «this.getOrderByNameForParent(curParent).asSetter()»($sortkey)
    {
      return $this->setValue('«this.getOrderByNameForParent(curParent)»', $sortkey);
    }
    «ENDFOREACH-»
    /**
     * Get the default sortkey
     * @return Number
     */
    function «this.getOrderByName().asGetter()»()
    {
      return $this->getValue('«this.getOrderByName()»');
    }
    /**
     * Set the default sortkey
     * @param sortkey The sortkey value
     */
    function «this.getOrderByName().asSetter()»($sortkey)
    {
      return $this->setValue('«this.getOrderByName()»', $sortkey);
    }
  «ENDIF-»
  «IF this.getWCMFValueRefs().size > 0-»
    «EXPAND references FOR this-»
  «ENDIF-»
  «IF this.getParentNodesRecursive().size > 0 || this.getChildNodesRecursive().size > 0 -»
    «EXPAND parents FOR this-»
    «EXPAND children FOR this-»
  «ENDIF-»
}
?>
«ENDFILE-»
«ENDDEFINE»

«REM» values -----------------------------------------------------«ENDREM»
«DEFINE values FOR WCMFNode-»
  «FOREACH this.getWCMFValues() AS curValue-»
    /**
     * Get the value of the «curValue.name» attribute
     * @param unconverted Boolean wether to get the converted or stored value (default: false)
     * @return Mixed
     */
    function «curValue.name.asGetter()»($unconverted=false)
    {
      $value = null;
      if ($unconverted) { $value = $this->getUnconvertedValue('«curValue.name»'); }
      else { $value = $this->getValue('«curValue.name»'); }
      return $value;
    }
    /**
     * Set the value of the «curValue.name» attribute
     * @param «curValue.name» The value to set
     */
    function «curValue.name.asSetter()»($«curValue.name»)
    {
      return $this->setValue('«curValue.name»', $«curValue.name»);
    }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» valueDisplayNames ------------------------------------------«ENDREM»
«DEFINE valueDisplayNames FOR WCMFNode-»
  «FOREACH this.getWCMFValuesRecursive() AS curValue-»
      if ($name == '«curValue.name»') { $displayName = Message::get("«curValue.name»"); }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» valueDescription -------------------------------------------«ENDREM»
«DEFINE valueDescription FOR WCMFNode-»
  «FOREACH this.getWCMFValuesRecursive() AS curValue-»
      if ($name == '«curValue.name»') { $description = Message::get("«curValue.getComment(" ")»"); }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» references -------------------------------------------------«ENDREM»
«DEFINE references FOR WCMFNode-»
  «FOREACH this.getWCMFValueRefs() AS curReference-»
    /**
     * Get the value of the «curReference.name» reference attribute
     * @return Mixed
     */
    function «curReference.name.asGetter()»()
    {
      return $this->getValue('«curReference.name»');
    }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» parents ----------------------------------------------------«ENDREM»
«DEFINE parents FOR WCMFNode-»
  «FOREACH this.getParentNodesRecursive() AS curParent-»
    /**
     * Get the «curParent.type.name» instances in the «curParent.getRoleName()» relation
     * @return Array of «curParent.type.name» instances
     */
    function «curParent.getRoleName().asGetter()»List()
    {
      return $this->getParentsEx(null, '«curParent.getRoleName()»');
    }
    /**
     * Set the «curParent.type.name» instances in the «curParent.getRoleName()» relation
     * @param nodeList Array of «curParent.type.name» instances
     */
    function «curParent.getRoleName().asSetter()»List(array $nodeList)
    {
      $this->setValue('«curParent.getRoleName()»', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, '«curParent.getRoleName()»');
      }
    }
  «ENDFOREACH-»
«ENDDEFINE»

«REM» children ---------------------------------------------------«ENDREM»
«DEFINE children FOR WCMFNode-»
  «FOREACH this.getChildNodesRecursive() AS curChild-»
    «IF curChild.type.metaType.toString().contains("WCMFManyToMany")-»
      «FOREACH ((WCMFNode)curChild.type).getParentNodes() AS curChildParent-»
        «IF isAtOtherNmEnd(this, curChildParent.type, curChild.type)-»
    /**
     * Get the «curChildParent.type.name» instances in the «curChildParent.type.name» relation
     * @return Array of «curChildParent.type.name» instances
     */
    function «curChildParent.type.name.asGetter()»List()
    {
      return $this->getChildrenEx(null, '«curChildParent.type.name»', null, null, null, false);
    }
    /**
     * Set the «curChildParent.type.name» instances in the «curChildParent.type.name» relation
     * @param nodeList Array of «curChildParent.type.name» instances
     */
    function «curChildParent.type.name.asSetter()»List(array $nodeList)
    {
      $this->setValue('«curChildParent.type.name»', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, '«curChildParent.type.name»');
      }
    }
        «ENDIF-»
      «ENDFOREACH-»
    «ELSE-»
    /**
     * Get the «curChild.type.name» instances in the «curChild.getRoleName()» relation
     * @return Array of «curChild.type.name» instances
     */
    function «curChild.getRoleName().asGetter()»List()
    {
      return $this->getChildrenEx(null, '«curChild.getRoleName()»', null, null, null, false);
    }
    /**
     * Set the «curChild.type.name» instances in the «curChild.getRoleName()» relation
     * @param nodeList Array of «curChild.type.name» instances
     */
    function «curChild.getRoleName().asSetter()»List(array $nodeList)
    {
      $this->setValue('«curChild.getRoleName()»', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, '«curChild.getRoleName()»');
      }
    }
    «ENDIF-»
  «ENDFOREACH-»
«ENDDEFINE»
