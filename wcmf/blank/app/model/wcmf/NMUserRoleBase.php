<?php
/**
 * This file was generated by wCMFGenerator 3.0.0017 from newroles.uml on Fri Jun 10 17:44:16 CEST 2011.
 * Manual modifications should be placed inside the protected regions.
 */
namespace application\model\wcmf;

use wcmf\lib\i18n\Message;
use wcmf\lib\model\Node;
use wcmf\lib\persistence\ObjectId;

/**
 * @class NMUserRole
 * NMUserRole description:
 *
 * @author
 * @version 1.0
 */
class NMUserRoleBase extends Node
{
    /**
     * Constructor
     * @param oid ObjectId instance (optional)
     */
    function __construct($oid=null)
    {
      if ($oid == null) {
        $oid = new ObjectId('NMUserRole');
      }
      parent::__construct($oid);
    }
    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    function getObjectDisplayName()
    {
      return Message::get("NMUserRole");
    }
    /**
     * @see PersistentObject::getObjectDescription()
     */
    function getObjectDescription()
    {
      return Message::get("");
    }
    /**
     * @see PersistentObject::getValueDisplayName()
     */
    function getValueDisplayName($name, $type=null)
    {
      $displayName = $name;
      if ($name == 'fk_user_id') { $displayName = Message::get("fk_user_id"); }
      if ($name == 'fk_role_id') { $displayName = Message::get("fk_role_id"); }
      return Message::get($displayName);
    }
    /**
     * @see PersistentObject::getValueDescription()
     */
    function getValueDescription($name, $type=null)
    {
      $description = $name;
      if ($name == 'fk_user_id') { $description = Message::get(""); }
      if ($name == 'fk_role_id') { $description = Message::get(""); }
      return Message::get($description);
    }
    /**
     * Get the value of the fk_user_id attribute
     * @param unconverted Boolean wether to get the converted or stored value (default: false)
     * @return Mixed
     */
    function getFkUserId($unconverted=false)
    {
      $value = null;
      if ($unconverted) { $value = $this->getUnconvertedValue('fk_user_id'); }
      else { $value = $this->getValue('fk_user_id'); }
      return $value;
    }
    /**
     * Set the value of the fk_user_id attribute
     * @param fk_user_id The value to set
     */
    function setFkUserId($fk_user_id)
    {
      return $this->setValue('fk_user_id', $fk_user_id);
    }
    /**
     * Get the value of the fk_role_id attribute
     * @param unconverted Boolean wether to get the converted or stored value (default: false)
     * @return Mixed
     */
    function getFkRoleId($unconverted=false)
    {
      $value = null;
      if ($unconverted) { $value = $this->getUnconvertedValue('fk_role_id'); }
      else { $value = $this->getValue('fk_role_id'); }
      return $value;
    }
    /**
     * Set the value of the fk_role_id attribute
     * @param fk_role_id The value to set
     */
    function setFkRoleId($fk_role_id)
    {
      return $this->setValue('fk_role_id', $fk_role_id);
    }
    /**
     * Get the RoleRDB instances in the RoleRDB relation
     * @return Array of RoleRDB instances
     */
    function getRoleRDBList()
    {
      return $this->getParentsEx(null, 'RoleRDB');
    }
    /**
     * Set the RoleRDB instances in the RoleRDB relation
     * @param nodeList Array of RoleRDB instances
     */
    function setRoleRDBList(array $nodeList)
    {
      $this->setValue('RoleRDB', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'RoleRDB');
      }
    }
    /**
     * Get the UserRDB instances in the UserRDB relation
     * @return Array of UserRDB instances
     */
    function getUserRDBList()
    {
      return $this->getParentsEx(null, 'UserRDB');
    }
    /**
     * Set the UserRDB instances in the UserRDB relation
     * @param nodeList Array of UserRDB instances
     */
    function setUserRDBList(array $nodeList)
    {
      $this->setValue('UserRDB', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'UserRDB');
      }
    }
}
?>
