<?php
/**
 * This file was generated by wCMFGenerator 3.0.0017 from newroles.uml on Fri Jun 10 17:44:16 CEST 2011.
 * Manual modifications should be placed inside the protected regions.
 */
namespace application\model\wcmf;

use application\model\wcmf\UserRDB;
use wcmf\lib\model\mapper\NodeUnifiedRDBMapper;
use wcmf\lib\model\mapper\RDBAttributeDescription;
use wcmf\lib\model\mapper\RDBManyToManyRelationDescription;
use wcmf\lib\model\mapper\RDBManyToOneRelationDescription;
use wcmf\lib\model\mapper\RDBMapper;
use wcmf\lib\model\mapper\RDBOneToManyRelationDescription;
use wcmf\lib\persistence\ObjectId;

/**
 * @class UserRDBRDBMapper
 * UserRDBRDBMapper maps UserRDB Nodes to the database.
 * UserRDB description:
 *
 * @author
 * @version 1.0
 */
class UserRDBRDBMapper extends NodeUnifiedRDBMapper
{
  /**
   * @see RDBMapper::getType()
   */
  public function getType()
  {
    return 'UserRDB';
  }
  /**
   * @see PersistenceMapper::getPkNames()
   */
  public function getPkNames()
  {
    return array('id');
  }
  /**
   * @see PersistenceMapper::getProperties()
   */
  public function getProperties()
  {
    return array(
      'is_searchable' => true,
      'display_value' => 'login',
// PROTECTED REGION ID(application/include/model/wcmf/UserRDBRDBMapper.php/Properties) ENABLED START
// PROTECTED REGION END
    );
  }
  /**
   * @see RDBMapper::getOwnDefaultOrder()
   */
  public function getOwnDefaultOrder($roleName=null)
  {
    return array('sortFieldName' => 'name', 'sortDirection' => 'ASC', 'isSortkey' => false);
  }
  /**
   * @see RDBMapper::getRelationDescriptions()
   */
  protected function getRelationDescriptions()
  {
    return array(
      'Locktable' => new RDBOneToManyRelationDescription('UserRDB', 'UserRDB', 'Locktable', 'Locktable', '1', '1', '0', 'unbounded', 'composite', 'none', 'true', 'true', 'child', 'id', 'fk_user_id'),
      'RoleRDB' => new RDBManyToManyRelationDescription(
        /* this -> nm  */ new RDBOneToManyRelationDescription('UserRDB', 'UserRDB', 'NMUserRole', 'NMUserRole', '1', '1', '0', 'unbounded', 'composite', 'none', 'true', 'true', 'child', 'id', 'fk_user_id'),
        /* nm -> other */ new RDBManyToOneRelationDescription('NMUserRole', 'NMUserRole', 'RoleRDB', 'RoleRDB', '0', 'unbounded', '1', '1', 'none', 'composite', 'true', 'true', 'parent', 'id', 'fk_role_id')
      ),
      'UserConfig' => new RDBOneToManyRelationDescription('UserRDB', 'UserRDB', 'UserConfig', 'UserConfig', '1', '1', '0', 'unbounded', 'composite', 'none', 'true', 'true', 'child', 'id', 'fk_user_id'),
    );
  }
  /**
   * @see RDBMapper::getAttributeDescriptions()
   */
  protected function getAttributeDescriptions()
  {
    return array(
     /**
      * Value description:
      */
      'id' => new RDBAttributeDescription('id', '', array('DATATYPE_IGNORE'), null, '', '', '', false, 'text', 'text', 'user', 'id'),
     /**
      * Value description:
      */
      'login' => new RDBAttributeDescription('login', 'string', array('DATATYPE_ATTRIBUTE'), null, '', '\s', '', true, 'text', 'text', 'user', 'login'),
     /**
      * Value description:
      */
      'password' => new RDBAttributeDescription('password', 'string', array('DATATYPE_ATTRIBUTE'), null, '', '', '', true, 'text', 'text', 'user', 'password'),
     /**
      * Value description:
      */
      'name' => new RDBAttributeDescription('name', 'string', array('DATATYPE_ATTRIBUTE'), null, '', '', '', true, 'text', 'text', 'user', 'name'),
     /**
      * Value description:
      */
      'firstname' => new RDBAttributeDescription('firstname', 'string', array('DATATYPE_ATTRIBUTE'), null, '', '', '', true, 'text', 'text', 'user', 'firstname'),
     /**
      * Value description:
      */
      'config' => new RDBAttributeDescription('config', 'string', array('DATATYPE_ATTRIBUTE'), null, '', '', '', true, 'select#fkt:g_getConfigFiles', 'text', 'user', 'config'),
    );
  }
  /**
   * @see RDBMapper::createObject()
   */
  protected function createObject(ObjectId $oid=null)
  {
    return new UserRDB($oid);
  }
  /**
   * @see NodeUnifiedRDBMapper::getTableName()
   */
  protected function getTableName()
  {
    return 'user';
  }
}
?>
