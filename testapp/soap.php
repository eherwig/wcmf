<?php
/**
 * This file was generated by ChronosGenerator  from cwm-export.uml on Fri Feb 22 00:20:13 CET 2013. 
 * Manual modifications should be placed inside the protected regions.
 * NOTE: This file was created in the application root directory to 
 *       ensure that everything is working correctly
 */
require_once("base_dir.php");  
require_once(WCMF_BASE."wcmf/lib/presentation/Application.php");
require_once(WCMF_BASE."wcmf/lib/security/AuthUser.php");
require_once(WCMF_BASE."wcmf/3rdparty/nusoap/lib/nusoap.php");
require_once(WCMF_BASE."wcmf/lib/util/Log.php");
require_once(WCMF_BASE."wcmf/lib/presentation/ActionMapper.php");
require_once(WCMF_BASE."wcmf/lib/presentation/Request.php");
// PROTECTED REGION ID(/soap/Import) ENABLED START
// PROTECTED REGION END

$NAMESPACE = 'http://wcmf.sourceforge.net';
$server = new soap_server();
$server->configureWSDL('SOAPService', $NAMESPACE);
$server->wsdl->schemaTargetNamespace = $NAMESPACE;

$server->wsdl->addComplexType(
    'OidList',
    'complexType',
    'array',
    '',
    'SOAP-ENC:Array',
    array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'xsd:string[]')
    ),
    'xsd:string'
);
$server->wsdl->addComplexType(
    'ObjectList',
    'complexType',
    'array',
    '',
    'SOAP-ENC:Array',
    array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:object[]')
    ),
    'tns:object'
);
$server->wsdl->addComplexType('object', 'complexType', 'struct', 'sequence', '',
    array(
        'type' => array('name' => 'type', 'type' => 'xsd:string'),
        'oid' => array('name' => 'oid', 'type' => 'xsd:string'),
        'displayName' => array('name' => 'displayName', 'type' => 'xsd:string')
    )
);

/**
 * WSDL definition for Publisher
 */
$server->wsdl->addComplexType('Publisher', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'Book' => array('name' => 'Book', 'type' => 'tns:BookList'),
        'NMPublisherAuthor' => array('name' => 'NMPublisherAuthor', 'type' => 'tns:NMPublisherAuthorList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('PublisherList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Publisher[]')
    ),
    'tns:Publisher'
);

/**
 * WSDL definition for Author
 */
$server->wsdl->addComplexType('Author', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'Chapter' => array('name' => 'Chapter', 'type' => 'tns:ChapterList'),
        'NMPublisherAuthor' => array('name' => 'NMPublisherAuthor', 'type' => 'tns:NMPublisherAuthorList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('AuthorList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Author[]')
    ),
    'tns:Author'
);
$server->register('getAuthorList',
  array('login'=>'xsd:string', 'password'=>'xsd:string'),
  array('return'=>'tns:AuthorList'), $NAMESPACE);
  
$server->register('createAuthor',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'Author'=>'tns:Author', 'parentoid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readAuthor',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
  array('return'=>'tns:Author'), $NAMESPACE);
  
$server->register('updateAuthor',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'Author'=>'tns:Author', 'oid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteAuthor',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Book
 */
$server->wsdl->addComplexType('Book', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_publisher_id' => array('name' => 'fk_publisher_id', 'type' => 'xsd:string'),
        'title' => array('name' => 'title', 'type' => 'xsd:string'),
        'description' => array('name' => 'description', 'type' => 'xsd:string'),
        'year' => array('name' => 'year', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'Chapter' => array('name' => 'Chapter', 'type' => 'tns:ChapterList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('BookList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Book[]')
    ),
    'tns:Book'
);
$server->register('getBookList',
  array('login'=>'xsd:string', 'password'=>'xsd:string'),
  array('return'=>'tns:BookList'), $NAMESPACE);
  
$server->register('createBook',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'Book'=>'tns:Book', 'parentoid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readBook',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
  array('return'=>'tns:Book'), $NAMESPACE);
  
$server->register('updateBook',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'Book'=>'tns:Book', 'oid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteBook',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Chapter
 */
$server->wsdl->addComplexType('Chapter', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chapter_id' => array('name' => 'fk_chapter_id', 'type' => 'xsd:string'),
        'fk_book_id' => array('name' => 'fk_book_id', 'type' => 'xsd:string'),
        'fk_author_id' => array('name' => 'fk_author_id', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'Chapter' => array('name' => 'Chapter', 'type' => 'tns:ChapterList'),
        'Image' => array('name' => 'Image', 'type' => 'tns:ImageList'),
        'Image' => array('name' => 'Image', 'type' => 'tns:ImageList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ChapterList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Chapter[]')
    ),
    'tns:Chapter'
);
$server->register('getChapterList',
  array('login'=>'xsd:string', 'password'=>'xsd:string'),
  array('return'=>'tns:ChapterList'), $NAMESPACE);
  
$server->register('createChapter',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'Chapter'=>'tns:Chapter', 'parentoid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readChapter',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
  array('return'=>'tns:Chapter'), $NAMESPACE);
  
$server->register('updateChapter',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'Chapter'=>'tns:Chapter', 'oid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteChapter',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for Image
 */
$server->wsdl->addComplexType('Image', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_chapter_id' => array('name' => 'fk_chapter_id', 'type' => 'xsd:string'),
        'fk_titlechapter_id' => array('name' => 'fk_titlechapter_id', 'type' => 'xsd:string'),
        'filename' => array('name' => 'filename', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('ImageList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Image[]')
    ),
    'tns:Image'
);
$server->register('getImageList',
  array('login'=>'xsd:string', 'password'=>'xsd:string'),
  array('return'=>'tns:ImageList'), $NAMESPACE);
  
$server->register('createImage',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'Image'=>'tns:Image', 'parentoid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('readImage',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string', 'depth'=>'xsd:integer'),
  array('return'=>'tns:Image'), $NAMESPACE);
  
$server->register('updateImage',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'Image'=>'tns:Image', 'oid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);
  
$server->register('deleteImage',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'oid'=>'xsd:string'),
  array('return'=>'xsd:string'), $NAMESPACE);

/**
 * WSDL definition for EntityBase
 */
$server->wsdl->addComplexType('EntityBase', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'created' => array('name' => 'created', 'type' => 'xsd:string'),
        'creator' => array('name' => 'creator', 'type' => 'xsd:string'),
        'modified' => array('name' => 'modified', 'type' => 'xsd:string'),
        'last_editor' => array('name' => 'last_editor', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('EntityBaseList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:EntityBase[]')
    ),
    'tns:EntityBase'
);

/**
 * WSDL definition for NMPublisherAuthor
 */
$server->wsdl->addComplexType('NMPublisherAuthor', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_author_id' => array('name' => 'fk_author_id', 'type' => 'xsd:string'),
        'fk_publisher_id' => array('name' => 'fk_publisher_id', 'type' => 'xsd:string'),
        'sortkey' => array('name' => 'sortkey', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMPublisherAuthorList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMPublisherAuthor[]')
    ),
    'tns:NMPublisherAuthor'
);

/**
 * WSDL definition for DBSequence
 */
$server->wsdl->addComplexType('DBSequence', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('DBSequenceList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:DBSequence[]')
    ),
    'tns:DBSequence'
);

/**
 * WSDL definition for Language
 */
$server->wsdl->addComplexType('Language', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'code' => array('name' => 'code', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('LanguageList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Language[]')
    ),
    'tns:Language'
);

/**
 * WSDL definition for Locktable
 */
$server->wsdl->addComplexType('Locktable', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_user_id' => array('name' => 'fk_user_id', 'type' => 'xsd:string'),
        'objectid' => array('name' => 'objectid', 'type' => 'xsd:string'),
        'sessionid' => array('name' => 'sessionid', 'type' => 'xsd:string'),
        'since' => array('name' => 'since', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('LocktableList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Locktable[]')
    ),
    'tns:Locktable'
);

/**
 * WSDL definition for RoleRDB
 */
$server->wsdl->addComplexType('RoleRDB', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'NMUserRole' => array('name' => 'NMUserRole', 'type' => 'tns:NMUserRoleList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('RoleRDBList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:RoleRDB[]')
    ),
    'tns:RoleRDB'
);

/**
 * WSDL definition for Translation
 */
$server->wsdl->addComplexType('Translation', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'objectid' => array('name' => 'objectid', 'type' => 'xsd:string'),
        'attribute' => array('name' => 'attribute', 'type' => 'xsd:string'),
        'translation' => array('name' => 'translation', 'type' => 'xsd:string'),
        'language' => array('name' => 'language', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('TranslationList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:Translation[]')
    ),
    'tns:Translation'
);

/**
 * WSDL definition for UserConfig
 */
$server->wsdl->addComplexType('UserConfig', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'fk_user_id' => array('name' => 'fk_user_id', 'type' => 'xsd:string'),
        'key' => array('name' => 'key', 'type' => 'xsd:string'),
        'val' => array('name' => 'val', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('UserConfigList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:UserConfig[]')
    ),
    'tns:UserConfig'
);

/**
 * WSDL definition for UserRDB
 */
$server->wsdl->addComplexType('UserRDB', 'complexType', 'struct', 'sequence', '',
    array(
        'id' => array('name' => 'id', 'type' => 'xsd:string'),
        'login' => array('name' => 'login', 'type' => 'xsd:string'),
        'password' => array('name' => 'password', 'type' => 'xsd:string'),
        'name' => array('name' => 'name', 'type' => 'xsd:string'),
        'firstname' => array('name' => 'firstname', 'type' => 'xsd:string'),
        'config' => array('name' => 'config', 'type' => 'xsd:string'),
        'Locktable' => array('name' => 'Locktable', 'type' => 'tns:LocktableList'),
        'UserConfig' => array('name' => 'UserConfig', 'type' => 'tns:UserConfigList'),
        'NMUserRole' => array('name' => 'NMUserRole', 'type' => 'tns:NMUserRoleList'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('UserRDBList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:UserRDB[]')
    ),
    'tns:UserRDB'
);

/**
 * WSDL definition for NMUserRole
 */
$server->wsdl->addComplexType('NMUserRole', 'complexType', 'struct', 'sequence', '',
    array(
        'fk_user_id' => array('name' => 'fk_user_id', 'type' => 'xsd:string'),
        'fk_role_id' => array('name' => 'fk_role_id', 'type' => 'xsd:string'),
        'parentoids' => array('name' => 'parentoids', 'type' => 'tns:OidList'),
        'childoids' => array('name' => 'childoids', 'type' => 'tns:OidList')
    )
);
$server->wsdl->addComplexType('NMUserRoleList', 'complexType', 'array', '', 'SOAP-ENC:Array', array(),
    array(
        array('ref'=>'SOAP-ENC:arrayType','wsdl:arrayType'=>'tns:NMUserRole[]')
    ),
    'tns:NMUserRole'
);

$server->register('search',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'searchterm'=>'xsd:string'),
  array('return'=>'tns:ObjectList'), $NAMESPACE);

/**  
 * SOAP Method search 
 * @param login The login name
 * @param password The login password
 * @param searchterm The search term
 * @return string
 */  
function search($login, $password, $searchterm)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'searchterm' => $searchterm, 'usr_action' => 'soapSearch'));
  $result = doSoapCall();
  return $result->getValue('soapResult');
}  


$server->register('advancedSearch',
  array('login'=>'xsd:string', 'password'=>'xsd:string', 'type'=>'xsd:string', 'query'=>'xsd:string'),
  array('return'=>'tns:ObjectList'), $NAMESPACE);

/**  
 * SOAP Method advancedSearch 
 * @param login The login name
 * @param password The login password
 * @param type The type to search for
 * @param query The query definition (@see StringQuery)
 * @return string
 */  
function advancedSearch($login, $password, $type, $query)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'type' => $type, 'query' => $query, 'usr_action' => 'soapAdvancedSearch'));
  $result = doSoapCall();
  return $result->getValue('soapResult');
}  


// Use the request to (try to) invoke the service
$HTTP_RAW_POST_DATA = isset($HTTP_RAW_POST_DATA) ? $HTTP_RAW_POST_DATA : '';
$server->service($HTTP_RAW_POST_DATA);


/**  
 * SOAP Method getAuthorList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getAuthorList($login, $password)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'list', 'type' => 'Author'));
// PROTECTED REGION ID(soap/Methods/getAuthorList) ENABLED START
  $result = doSoapCall();
  return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createAuthor
 * @param login The login name
 * @param password The login password
 * @param Author The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createAuthor($login, $password, $Author, $parentoid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'new', 'newtype' => 'Author',  PersistenceFacade::composeOID(array('type' => 'Author')) => $Author, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createAuthor) ENABLED START
  $result = doSoapCall();
  return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readAuthor 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readAuthor($login, $password, $oid, $depth)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readAuthor) ENABLED START
  $result = doSoapCall();
  return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateAuthor 
 * @param login The login name
 * @param password The login password
 * @param Author The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateAuthor($login, $password, $Author, $oid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'save', $oid => $Author, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateAuthor) ENABLED START
  $result = doSoapCall();
  return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteAuthor
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteAuthor($login, $password, $oid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteAuthor) ENABLED START
  $result = doSoapCall();
  return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getBookList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getBookList($login, $password)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'list', 'type' => 'Book'));
// PROTECTED REGION ID(soap/Methods/getBookList) ENABLED START
  $result = doSoapCall();
  return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createBook
 * @param login The login name
 * @param password The login password
 * @param Book The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createBook($login, $password, $Book, $parentoid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'new', 'newtype' => 'Book',  PersistenceFacade::composeOID(array('type' => 'Book')) => $Book, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createBook) ENABLED START
  $result = doSoapCall();
  return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readBook 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readBook($login, $password, $oid, $depth)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readBook) ENABLED START
  $result = doSoapCall();
  return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateBook 
 * @param login The login name
 * @param password The login password
 * @param Book The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateBook($login, $password, $Book, $oid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'save', $oid => $Book, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateBook) ENABLED START
  $result = doSoapCall();
  return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteBook
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteBook($login, $password, $oid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteBook) ENABLED START
  $result = doSoapCall();
  return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getChapterList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getChapterList($login, $password)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'list', 'type' => 'Chapter'));
// PROTECTED REGION ID(soap/Methods/getChapterList) ENABLED START
  $result = doSoapCall();
  return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createChapter
 * @param login The login name
 * @param password The login password
 * @param Chapter The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createChapter($login, $password, $Chapter, $parentoid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'new', 'newtype' => 'Chapter',  PersistenceFacade::composeOID(array('type' => 'Chapter')) => $Chapter, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createChapter) ENABLED START
  $result = doSoapCall();
  return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readChapter 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readChapter($login, $password, $oid, $depth)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readChapter) ENABLED START
  $result = doSoapCall();
  return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateChapter 
 * @param login The login name
 * @param password The login password
 * @param Chapter The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateChapter($login, $password, $Chapter, $oid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'save', $oid => $Chapter, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateChapter) ENABLED START
  $result = doSoapCall();
  return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteChapter
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteChapter($login, $password, $oid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteChapter) ENABLED START
  $result = doSoapCall();
  return $result;
// PROTECTED REGION END
}  

/**  
 * SOAP Method getImageList 
 * @param login The login name
 * @param password The login password
 * @return string
 */  
function getImageList($login, $password)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'list', 'type' => 'Image'));
// PROTECTED REGION ID(soap/Methods/getImageList) ENABLED START
  $result = doSoapCall();
  return $result->getValue('objects');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method createImage
 * @param login The login name
 * @param password The login password
 * @param Image The serialized object data
 * @param parentoid The object id of the object to add the new object as child to
 * @return string
 */  
function createImage($login, $password, $Image, $parentoid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'new', 'newtype' => 'Image',  PersistenceFacade::composeOID(array('type' => 'Image')) => $Image, 'poid' => $parentoid));
// PROTECTED REGION ID(soap/Methods/createImage) ENABLED START
  $result = doSoapCall();
  return $result->getValue('oid');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method readImage 
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to load
 * @param depth The number of generations to load
 * @return string
 */  
function readImage($login, $password, $oid, $depth)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'display', 'oid' => $oid, 'depth' => $depth));
// PROTECTED REGION ID(soap/Methods/readImage) ENABLED START
  $result = doSoapCall();
  return $result->getValue('node');
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method updateImage 
 * @param login The login name
 * @param password The login password
 * @param Image The serialized object data
 * @param oid The object id of the object to update
 * @return string
 */  
function updateImage($login, $password, $Image, $oid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'save', $oid => $Image, 'oid' => $oid));
// PROTECTED REGION ID(soap/Methods/updateImage) ENABLED START
  $result = doSoapCall();
  return $result;
// PROTECTED REGION END
}  
  
/**  
 * SOAP Method deleteImage
 * @param login The login name
 * @param password The login password
 * @param oid The object id of the object to delete
 * @return string
 */  
function deleteImage($login, $password, $oid)  
{
  $_GET = array_merge($_GET, array('login' => $login, 'password' => $password, 'action' => 'delete', 'deleteoids' => $oid));
// PROTECTED REGION ID(soap/Methods/deleteImage) ENABLED START
  $result = doSoapCall();
  return $result;
// PROTECTED REGION END
}  

/**
 * Do the soap call using the ActionMapper
 * @return The Response instance from the executed Controller
 */
function doSoapCall()
{
  // initialize the application
  $application = Application::getInstance();
  $application->setErrorHandler();
  $callParams = $application->initialize('include/', 'config.ini', 'ExitController', '', $_GET['action'], MSG_FORMAT_SOAP);

  // process the requested action
  $request = new Request(
    $callParams['controller'], 
    $callParams['context'], 
    $callParams['action'], 
    $callParams['data']
  );
  
  // login with the data given in the request
  $session = &SessionData::getInstance();
  $objectFactory = &ObjectFactory::getInstance();
  $authUser = new AuthUser();
  if ($authUser->login($request->getValue('login'), $request->getValue('password')))
  {
    // login succeeded, store the user in the session
    $session->set('auth_user', $authUser);
  
    $request->setFormat(MSG_FORMAT_SOAP);
    $request->setResponseFormat(MSG_FORMAT_SOAP);
    $response = ActionMapper::processAction($request);
    $error = $response->getValue('errorMessage');
    if (strlen($error) > 0) {
      throw new ApplicationException($request, $response, 
        ApplicationError::get('GENERAL_ERROR', array('message' => $error)));
    }
  }
  else {
    throw new ApplicationException($request, null, 
      ApplicationError::get('AUTHENTICATION_FAILED'));
  }
  // cleanup
  $lockManager = LockManager::getInstance();
  $lockManager->releaseAllLocks();
  $session->destroy();
      
  return $response;
}

/**
 * Global error handling function.
 * @param message The error message
 * @param file The php file in which the error occured (optional)
 * @param line The line in the php file in which the error occured (optional)
 * @return The value
 */
function onError($message, $file='', $line='') 
{ 
  global $server;
  $server->fault('SOAP-ENV:SERVER', $message, '', Log::getStackTrace());
  Log::error($message." (".$file.", ".$line.").\n".Log::getStackTrace());
}
?>
