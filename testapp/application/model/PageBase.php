<?php
/*
 * Copyright (c) 2013 The Olympos Development Team.
 * 
 * http://sourceforge.net/projects/olympos/
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */

/**
 * This file was generated by ChronosGenerator  from cwm-export.uml on Wed Feb 20 15:01:28 CET 2013. 
 * Manual modifications should be placed inside the protected regions.
 */
namespace testapp\application\model;

use testapp\application\model\EntityBase;

use wcmf\lib\i18n\Message;
use wcmf\lib\persistence\ObjectId;

/**
 * @class Page
 * Page description: ?
 *
 * @author 
 * @version 1.0
 */
class PageBase extends EntityBase {

    /**
     * Constructor
     * @param oid ObjectId instance (optional)
     */
    public function __construct($oid=null) {
      if ($oid == null) {
        $oid = new ObjectId('Page');
    }
      parent::__construct($oid);
    }

    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    public function getObjectDisplayName() {
      return Message::get("Page");
    }

    /**
     * @see PersistentObject::getObjectDescription()
     */
    public function getObjectDescription() {
      return Message::get("?");
    }

    /**
     * @see PersistentObject::getValueDisplayName()
     */
    public function getValueDisplayName($name) {
      $displayName = $name;
      if ($name == 'id') { $displayName = Message::get("id"); }
      if ($name == 'fk_page_id') { $displayName = Message::get("fk_page_id"); }
      if ($name == 'fk_author_id') { $displayName = Message::get("fk_author_id"); }
      if ($name == 'name') { $displayName = Message::get("name"); }
      if ($name == 'created') { $displayName = Message::get("created"); }
      if ($name == 'creator') { $displayName = Message::get("creator"); }
      if ($name == 'modified') { $displayName = Message::get("modified"); }
      if ($name == 'last_editor') { $displayName = Message::get("last_editor"); }
      return Message::get($displayName);
    }

    /**
     * @see PersistentObject::getValueDescription()
     */
    public function getValueDescription($name) {
      $description = $name;
      if ($name == 'id') { $description = Message::get(""); }
      if ($name == 'fk_page_id') { $description = Message::get(""); }
      if ($name == 'fk_author_id') { $description = Message::get(""); }
      if ($name == 'name') { $description = Message::get("?"); }
      if ($name == 'created') { $description = Message::get(""); }
      if ($name == 'creator') { $description = Message::get("?"); }
      if ($name == 'modified') { $description = Message::get("?"); }
      if ($name == 'last_editor') { $description = Message::get("?"); }
      return Message::get($description);
    }

    /**
     * Get the value of the id attribute
     * @param unconverted Boolean wether to get the converted or stored value (default: false)
     * @return Mixed
     */
    public function getId($unconverted=false) {
      $value = null;
      if ($unconverted) { $value = $this->getUnconvertedValue('id'); }
      else { $value = $this->getValue('id'); }
      return $value;
    }

    /**
     * Set the value of the id attribute
     * @param id The value to set
     */
    public function setId($id) {
      return $this->setValue('id', $id);
    }
    /**
     * Get the value of the fk_page_id attribute
     * @param unconverted Boolean wether to get the converted or stored value (default: false)
     * @return Mixed
     */
    public function getFkPageId($unconverted=false) {
      $value = null;
      if ($unconverted) { $value = $this->getUnconvertedValue('fk_page_id'); }
      else { $value = $this->getValue('fk_page_id'); }
      return $value;
    }

    /**
     * Set the value of the fk_page_id attribute
     * @param fk_page_id The value to set
     */
    public function setFkPageId($fk_page_id) {
      return $this->setValue('fk_page_id', $fk_page_id);
    }
    /**
     * Get the value of the fk_author_id attribute
     * @param unconverted Boolean wether to get the converted or stored value (default: false)
     * @return Mixed
     */
    public function getFkAuthorId($unconverted=false) {
      $value = null;
      if ($unconverted) { $value = $this->getUnconvertedValue('fk_author_id'); }
      else { $value = $this->getValue('fk_author_id'); }
      return $value;
    }

    /**
     * Set the value of the fk_author_id attribute
     * @param fk_author_id The value to set
     */
    public function setFkAuthorId($fk_author_id) {
      return $this->setValue('fk_author_id', $fk_author_id);
    }
    /**
     * Get the value of the name attribute
     * @param unconverted Boolean wether to get the converted or stored value (default: false)
     * @return Mixed
     */
    public function getName($unconverted=false) {
      $value = null;
      if ($unconverted) { $value = $this->getUnconvertedValue('name'); }
      else { $value = $this->getValue('name'); }
      return $value;
    }

    /**
     * Set the value of the name attribute
     * @param name The value to set
     */
    public function setName($name) {
      return $this->setValue('name', $name);
    }
    /**
     * Get the sortkey for the Author relation
     * @return Number
     */
    public function getSortkeyAuthor() {
      return $this->getValue('sortkey_author');
    }

    /**
     * Set the sortkey for the Author relation
     * @param sortkey The sortkey value
     */
    public function setSortkeyAuthor($sortkey) {
      return $this->setValue('sortkey_author', $sortkey);
    }
    /**
     * Get the sortkey for the ParentPage relation
     * @return Number
     */
    public function getSortkeyParentpage() {
      return $this->getValue('sortkey_parentpage');
    }

    /**
     * Set the sortkey for the ParentPage relation
     * @param sortkey The sortkey value
     */
    public function setSortkeyParentpage($sortkey) {
      return $this->setValue('sortkey_parentpage', $sortkey);
    }

    /**
     * Get the default sortkey
     * @return Number
     */
    public function getSortkey() {
      return $this->getValue('sortkey');
    }

    /**
     * Set the default sortkey
     * @param sortkey The sortkey value
     */
    public function setSortkey($sortkey) {
      return $this->setValue('sortkey', $sortkey);
    }
     
    /**
     * Get the value of the author_name reference attribute
     * @return Mixed
     */
    public function getAuthorName() {
      return $this->getValue('author_name');
    }
    /**
     * Get the Author instances in the Author relation
     * @return Array of Author instances
     */
    public function getAuthorList() {
      return $this->getParentsEx(null, 'Author');
        }

    /**
     * Set the Author instances in the Author relation
     * @param nodeList Array of Author instances
     */
    public function setAuthorList(array $nodeList) {
      $this->setValue('Author', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'Author');
      }
      }
    /**
     * Get the Page instances in the ParentPage relation
     * @return Array of Page instances
     */
    public function getParentPageList() {
      return $this->getParentsEx(null, 'ParentPage');
        }

    /**
     * Set the Page instances in the ParentPage relation
     * @param nodeList Array of Page instances
     */
    public function setParentPageList(array $nodeList) {
      $this->setValue('ParentPage', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'ParentPage');
      }
      }
    /**
     * Get the Image instances in the TitleImage relation
     * @return Array of Image instances
     */
    public function getTitleImageList() {
      return $this->getChildrenEx(null, 'TitleImage', null, null, null, false);
    }

    /**
     * Set the Image instances in the TitleImage relation
     * @param nodeList Array of Image instances
     */
    public function setTitleImageList(array $nodeList) {
      $this->setValue('TitleImage', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'TitleImage');
        }
      }
    /**
     * Get the Image instances in the NormalImage relation
     * @return Array of Image instances
     */
    public function getNormalImageList() {
      return $this->getChildrenEx(null, 'NormalImage', null, null, null, false);
    }

    /**
     * Set the Image instances in the NormalImage relation
     * @param nodeList Array of Image instances
     */
    public function setNormalImageList(array $nodeList) {
      $this->setValue('NormalImage', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'NormalImage');
        }
      }
    /**
     * Get the Page instances in the ChildPage relation
     * @return Array of Page instances
     */
    public function getChildPageList() {
      return $this->getChildrenEx(null, 'ChildPage', null, null, null, false);
    }

    /**
     * Set the Page instances in the ChildPage relation
     * @param nodeList Array of Page instances
     */
    public function setChildPageList(array $nodeList) {
      $this->setValue('ChildPage', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'ChildPage');
        }
      }
    /**
     * Get the Document instances in the Document relation
     * @return Array of Document instances
     */
    public function getDocumentList() {
      return $this->getChildrenEx(null, 'Document', null, null, null, false);
    }

    /**
     * Set the Document instances in the Document relation
     * @param nodeList Array of Document instances
     */
    public function setDocumentList(array $nodeList) {
      $this->setValue('Document', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'Document');
        }
      }
}
?>
